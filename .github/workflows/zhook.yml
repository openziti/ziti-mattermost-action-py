name: mattermost-ziti-webhook
on:
  issues:
  issue_comment:
  pull_request_review:
    types: [submitted]
  pull_request_review_comment:
  pull_request:
    types: [opened, reopened]
  push:
  fork:
  release:
    types: [released]
  workflow_dispatch:
  watch:
    types: [started]

jobs:
  mattermost-ziti-webhook:
    runs-on: ubuntu-24.04
    name: POST Webhook
    steps:
      - name: Debug Environment
        uses: hmarr/debug-action@v3

      - name: Install Debug Tools
        shell: bash
        run: sudo apt-get install --yes valgrind gdb

      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Python Script Directly
        if: |
          github.repository_owner == 'openziti'
          && ((github.event_name != 'pull_request_review')
          || (github.event_name == 'pull_request_review' && github.event.review.state == 'approved'))
        env:
          INPUT_ZITIID: ${{ secrets.ZITI_MATTERMOST_IDENTITY }}
          INPUT_WEBHOOKURL: ${{ secrets.ZHOOK_URL_DEV_NOTIFICATIONS }}
          INPUT_EVENTJSON: ${{ toJson(github.event) }}
          INPUT_SENDERUSERNAME: GitHubZ
          INPUT_SENDERICONURL: https://github.com/fluidicon.png
          INPUT_ZITILOGLEVEL: 6
        shell: bash
        run: |
          set -o pipefail
          set -o xtrace
          pip install --user --upgrade --requirement ./requirements.txt
          # in case valgrind catches a segfault, it will write a core file in ./vgcore.%p
          valgrind \
            --verbose \
            --log-file=${GITHUB_WORKSPACE}/direct-valgrind-%p-%n.log \
            --leak-check=yes \
            python ./zhook.py

      - name: Run in Docker with Core Dumps
        if: |
          github.repository_owner == 'openziti'
          && ((github.event_name != 'pull_request_review')
          || (github.event_name == 'pull_request_review' && github.event.review.state == 'approved'))
        shell: bash
        env:
          INPUT_ZITIID: ${{ secrets.ZITI_MATTERMOST_IDENTITY }}
          INPUT_WEBHOOKURL: ${{ secrets.ZHOOK_URL_DEV_NOTIFICATIONS }}
          INPUT_EVENTJSON: ${{ toJson(github.event) }}
          INPUT_SENDERUSERNAME: GitHubZ
          INPUT_SENDERICONURL: https://github.com/fluidicon.png
          INPUT_ZITILOGLEVEL: 6
        run: |
          set -o pipefail
          set -o xtrace
          
          cat > /tmp/docker.env << EOF
          INPUT_ZITIID="${INPUT_ZITIID}"
          INPUT_WEBHOOKURL="${INPUT_WEBHOOKURL}"
          INPUT_EVENTJSON="${INPUT_EVENTJSON}"
          INPUT_SENDERUSERNAME="${INPUT_SENDERUSERNAME}"
          INPUT_SENDERICONURL="${INPUT_SENDERICONURL}"
          INPUT_ZITILOGLEVEL="${INPUT_ZITILOGLEVEL}"
          GITHUB_WORKSPACE="${GITHUB_WORKSPACE}"
          EOF
          
          # configure the kernel to write core dumps to the workspace directory that is writable by the container
          sudo sysctl -w kernel.core_pattern="${GITHUB_WORKSPACE}/core.%e.%p.%t"

          # build the action's container image so we can source it for the debug image
          docker build -t zhook-action .
          docker build -t zhook-action-dbg -f debug.Dockerfile .
          docker run --rm \
            --volume "${GITHUB_WORKSPACE}:${GITHUB_WORKSPACE}" \
            --workdir "${GITHUB_WORKSPACE}" \
            --env-file /tmp/docker.env \
            --entrypoint=/bin/bash \
            zhook-action-dbg -euxo pipefail -c '
              ulimit -c unlimited;
              exec valgrind \
                --verbose \
                --log-file=${GITHUB_WORKSPACE}/docker-valgrind-%p-%n.log \
                --leak-check=yes \
                python /app/zhook.py;
            '

      - uses: ./
        name: Run as a GH Action from the Local Checkout
        if: |
          github.repository_owner == 'openziti'
          && ((github.event_name != 'pull_request_review')
          || (github.event_name == 'pull_request_review' && github.event.review.state == 'approved'))
        with:
          zitiId: ${{ secrets.ZITI_MATTERMOST_IDENTITY }}
          webhookUrl: ${{ secrets.ZHOOK_URL_DEV_NOTIFICATIONS }}
          eventJson: ${{ toJson(github.event) }}
          senderUsername: GitHubZ
          senderIconUrl: https://github.com/fluidicon.png
          zitiLogLevel: 6

      - name: Print Debug Info
        if: always()
        shell: bash
        run: |
          set -o xtrace
          set +o errexit
          echo "DEBUG: PYTHONPATH=${PYTHONPATH:-}"
          echo "DEBUG: PATH=${PATH:-}"
          echo "DEBUG: LD_LIBRARY_PATH=${LD_LIBRARY_PATH:-}"
          # list non-git files in the two uppermost levels of the workspace directory hierarchy
          find . -maxdepth 2 -path './.git' -prune -o -print
          find $(python -c "import site; print(site.USER_SITE)") -path "*/openziti*" -name "*.so*" -type f -print0 | xargs -0r ldd
          
          shopt -s nullglob
          # find valgrind logs from both execution steps
          typeset -a VALGRIND_LOGS=(${GITHUB_WORKSPACE}/*-valgrind-*.log)
          if (( ${#VALGRIND_LOGS[@]} )); then
            for LOG in "${VALGRIND_LOGS[@]}"; do
              if [ -s "$LOG" ]; then
                echo "DEBUG: Valgrind log: $LOG"
                cat "$LOG"
                echo "--- End of $(basename "$LOG") ---"
              fi
            done
          else
            echo "DEBUG: No Valgrind logs found"
          fi
          
          # find core dumps produced by the kernel and valgrind
          typeset -a CORES=(${GITHUB_WORKSPACE}/core.* ${GITHUB_WORKSPACE}/vgcore.*)
          shopt -u nullglob
          if (( ${#CORES[@]} )); then
            for CORE in "${CORES[@]}"; do
              if [ -s "$CORE" ]; then
                echo "DEBUG: Core dump: $CORE"
                EXECUTABLE=$(basename "$CORE" | cut -d. -f2)
                gdb -q $(realpath $(which "$EXECUTABLE")) -c "$CORE" --ex bt --ex exit
              fi
            done
          else
            echo "DEBUG: No core dumps found"
          fi
